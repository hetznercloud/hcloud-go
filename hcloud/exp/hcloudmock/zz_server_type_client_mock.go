// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/hcloud-go/v2/hcloud (interfaces: IServerTypeClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_server_type_client_mock.go -mock_names IServerTypeClient=ServerTypeClient github.com/hetznercloud/hcloud-go/v2/hcloud IServerTypeClient
//

// Package mock is a generated GoMock package.
package hcloudmock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// ServerTypeClient is a mock of IServerTypeClient interface.
type ServerTypeClient struct {
	ctrl     *gomock.Controller
	recorder *ServerTypeClientMockRecorder
}

// ServerTypeClientMockRecorder is the mock recorder for ServerTypeClient.
type ServerTypeClientMockRecorder struct {
	mock *ServerTypeClient
}

// NewServerTypeClient creates a new mock instance.
func NewServerTypeClient(ctrl *gomock.Controller) *ServerTypeClient {
	mock := &ServerTypeClient{ctrl: ctrl}
	mock.recorder = &ServerTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ServerTypeClient) EXPECT() *ServerTypeClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *ServerTypeClient) All(arg0 context.Context) ([]*hcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*hcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *ServerTypeClientMockRecorder) All(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*ServerTypeClient)(nil).All), arg0)
}

// AllWithOpts mocks base method.
func (m *ServerTypeClient) AllWithOpts(arg0 context.Context, arg1 hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", arg0, arg1)
	ret0, _ := ret[0].([]*hcloud.ServerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *ServerTypeClientMockRecorder) AllWithOpts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*ServerTypeClient)(nil).AllWithOpts), arg0, arg1)
}

// Get mocks base method.
func (m *ServerTypeClient) Get(arg0 context.Context, arg1 string) (*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *ServerTypeClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*ServerTypeClient)(nil).Get), arg0, arg1)
}

// GetByID mocks base method.
func (m *ServerTypeClient) GetByID(arg0 context.Context, arg1 int64) (*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *ServerTypeClientMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*ServerTypeClient)(nil).GetByID), arg0, arg1)
}

// GetByName mocks base method.
func (m *ServerTypeClient) GetByName(arg0 context.Context, arg1 string) (*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *ServerTypeClientMockRecorder) GetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*ServerTypeClient)(nil).GetByName), arg0, arg1)
}

// List mocks base method.
func (m *ServerTypeClient) List(arg0 context.Context, arg1 hcloud.ServerTypeListOpts) ([]*hcloud.ServerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*hcloud.ServerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *ServerTypeClientMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*ServerTypeClient)(nil).List), arg0, arg1)
}
