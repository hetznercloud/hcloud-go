// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/hcloud-go/v2/hcloud (interfaces: IVolumeClient)
//
// Generated by this command:
//
//	mockgen -package hcloudmock -destination zz_volume_client_mock.go -mock_names IVolumeClient=VolumeClient github.com/hetznercloud/hcloud-go/v2/hcloud IVolumeClient
//

// Package hcloudmock is a generated GoMock package.
package hcloudmock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// VolumeClient is a mock of IVolumeClient interface.
type VolumeClient struct {
	ctrl     *gomock.Controller
	recorder *VolumeClientMockRecorder
}

// VolumeClientMockRecorder is the mock recorder for VolumeClient.
type VolumeClientMockRecorder struct {
	mock *VolumeClient
}

// NewVolumeClient creates a new mock instance.
func NewVolumeClient(ctrl *gomock.Controller) *VolumeClient {
	mock := &VolumeClient{ctrl: ctrl}
	mock.recorder = &VolumeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *VolumeClient) EXPECT() *VolumeClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *VolumeClient) All(arg0 context.Context) ([]*hcloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*hcloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *VolumeClientMockRecorder) All(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*VolumeClient)(nil).All), arg0)
}

// AllWithOpts mocks base method.
func (m *VolumeClient) AllWithOpts(arg0 context.Context, arg1 hcloud.VolumeListOpts) ([]*hcloud.Volume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", arg0, arg1)
	ret0, _ := ret[0].([]*hcloud.Volume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *VolumeClientMockRecorder) AllWithOpts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*VolumeClient)(nil).AllWithOpts), arg0, arg1)
}

// Attach mocks base method.
func (m *VolumeClient) Attach(arg0 context.Context, arg1 *hcloud.Volume, arg2 *hcloud.Server) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", arg0, arg1, arg2)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Attach indicates an expected call of Attach.
func (mr *VolumeClientMockRecorder) Attach(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*VolumeClient)(nil).Attach), arg0, arg1, arg2)
}

// AttachWithOpts mocks base method.
func (m *VolumeClient) AttachWithOpts(arg0 context.Context, arg1 *hcloud.Volume, arg2 hcloud.VolumeAttachOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachWithOpts", arg0, arg1, arg2)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AttachWithOpts indicates an expected call of AttachWithOpts.
func (mr *VolumeClientMockRecorder) AttachWithOpts(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachWithOpts", reflect.TypeOf((*VolumeClient)(nil).AttachWithOpts), arg0, arg1, arg2)
}

// ChangeProtection mocks base method.
func (m *VolumeClient) ChangeProtection(arg0 context.Context, arg1 *hcloud.Volume, arg2 hcloud.VolumeChangeProtectionOpts) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeProtection", arg0, arg1, arg2)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeProtection indicates an expected call of ChangeProtection.
func (mr *VolumeClientMockRecorder) ChangeProtection(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeProtection", reflect.TypeOf((*VolumeClient)(nil).ChangeProtection), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *VolumeClient) Create(arg0 context.Context, arg1 hcloud.VolumeCreateOpts) (hcloud.VolumeCreateResult, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(hcloud.VolumeCreateResult)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *VolumeClientMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*VolumeClient)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *VolumeClient) Delete(arg0 context.Context, arg1 *hcloud.Volume) (*hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *VolumeClientMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*VolumeClient)(nil).Delete), arg0, arg1)
}

// Detach mocks base method.
func (m *VolumeClient) Detach(arg0 context.Context, arg1 *hcloud.Volume) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detach", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Detach indicates an expected call of Detach.
func (mr *VolumeClientMockRecorder) Detach(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detach", reflect.TypeOf((*VolumeClient)(nil).Detach), arg0, arg1)
}

// Get mocks base method.
func (m *VolumeClient) Get(arg0 context.Context, arg1 string) (*hcloud.Volume, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.Volume)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *VolumeClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*VolumeClient)(nil).Get), arg0, arg1)
}

// GetByID mocks base method.
func (m *VolumeClient) GetByID(arg0 context.Context, arg1 int64) (*hcloud.Volume, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.Volume)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *VolumeClientMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*VolumeClient)(nil).GetByID), arg0, arg1)
}

// GetByName mocks base method.
func (m *VolumeClient) GetByName(arg0 context.Context, arg1 string) (*hcloud.Volume, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.Volume)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *VolumeClientMockRecorder) GetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*VolumeClient)(nil).GetByName), arg0, arg1)
}

// List mocks base method.
func (m *VolumeClient) List(arg0 context.Context, arg1 hcloud.VolumeListOpts) ([]*hcloud.Volume, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*hcloud.Volume)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *VolumeClientMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*VolumeClient)(nil).List), arg0, arg1)
}

// Resize mocks base method.
func (m *VolumeClient) Resize(arg0 context.Context, arg1 *hcloud.Volume, arg2 int) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1, arg2)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Resize indicates an expected call of Resize.
func (mr *VolumeClientMockRecorder) Resize(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*VolumeClient)(nil).Resize), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *VolumeClient) Update(arg0 context.Context, arg1 *hcloud.Volume, arg2 hcloud.VolumeUpdateOpts) (*hcloud.Volume, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*hcloud.Volume)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *VolumeClientMockRecorder) Update(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*VolumeClient)(nil).Update), arg0, arg1, arg2)
}
