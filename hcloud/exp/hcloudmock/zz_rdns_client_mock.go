// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/hcloud-go/v2/hcloud (interfaces: IRDNSClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_rdns_client_mock.go -mock_names IRDNSClient=RDNSClient github.com/hetznercloud/hcloud-go/v2/hcloud IRDNSClient
//

// Package mock is a generated GoMock package.
package hcloudmock

import (
	context "context"
	net "net"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// RDNSClient is a mock of IRDNSClient interface.
type RDNSClient struct {
	ctrl     *gomock.Controller
	recorder *RDNSClientMockRecorder
}

// RDNSClientMockRecorder is the mock recorder for RDNSClient.
type RDNSClientMockRecorder struct {
	mock *RDNSClient
}

// NewRDNSClient creates a new mock instance.
func NewRDNSClient(ctrl *gomock.Controller) *RDNSClient {
	mock := &RDNSClient{ctrl: ctrl}
	mock.recorder = &RDNSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *RDNSClient) EXPECT() *RDNSClientMockRecorder {
	return m.recorder
}

// ChangeDNSPtr mocks base method.
func (m *RDNSClient) ChangeDNSPtr(arg0 context.Context, arg1 hcloud.RDNSSupporter, arg2 net.IP, arg3 *string) (*hcloud.Action, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDNSPtr", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*hcloud.Action)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ChangeDNSPtr indicates an expected call of ChangeDNSPtr.
func (mr *RDNSClientMockRecorder) ChangeDNSPtr(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDNSPtr", reflect.TypeOf((*RDNSClient)(nil).ChangeDNSPtr), arg0, arg1, arg2, arg3)
}
