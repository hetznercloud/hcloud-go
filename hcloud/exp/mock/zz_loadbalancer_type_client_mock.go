// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/hetznercloud/hcloud-go/v2/hcloud (interfaces: ILoadBalancerTypeClient)
//
// Generated by this command:
//
//	mockgen -package mock -destination zz_loadbalancer_type_client_mock.go -mock_names ILoadBalancerTypeClient=LoadBalancerTypeClient github.com/hetznercloud/hcloud-go/v2/hcloud ILoadBalancerTypeClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcloud "github.com/hetznercloud/hcloud-go/v2/hcloud"
	gomock "go.uber.org/mock/gomock"
)

// LoadBalancerTypeClient is a mock of ILoadBalancerTypeClient interface.
type LoadBalancerTypeClient struct {
	ctrl     *gomock.Controller
	recorder *LoadBalancerTypeClientMockRecorder
}

// LoadBalancerTypeClientMockRecorder is the mock recorder for LoadBalancerTypeClient.
type LoadBalancerTypeClientMockRecorder struct {
	mock *LoadBalancerTypeClient
}

// NewLoadBalancerTypeClient creates a new mock instance.
func NewLoadBalancerTypeClient(ctrl *gomock.Controller) *LoadBalancerTypeClient {
	mock := &LoadBalancerTypeClient{ctrl: ctrl}
	mock.recorder = &LoadBalancerTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *LoadBalancerTypeClient) EXPECT() *LoadBalancerTypeClientMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *LoadBalancerTypeClient) All(arg0 context.Context) ([]*hcloud.LoadBalancerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]*hcloud.LoadBalancerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *LoadBalancerTypeClientMockRecorder) All(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*LoadBalancerTypeClient)(nil).All), arg0)
}

// AllWithOpts mocks base method.
func (m *LoadBalancerTypeClient) AllWithOpts(arg0 context.Context, arg1 hcloud.LoadBalancerTypeListOpts) ([]*hcloud.LoadBalancerType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllWithOpts", arg0, arg1)
	ret0, _ := ret[0].([]*hcloud.LoadBalancerType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllWithOpts indicates an expected call of AllWithOpts.
func (mr *LoadBalancerTypeClientMockRecorder) AllWithOpts(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllWithOpts", reflect.TypeOf((*LoadBalancerTypeClient)(nil).AllWithOpts), arg0, arg1)
}

// Get mocks base method.
func (m *LoadBalancerTypeClient) Get(arg0 context.Context, arg1 string) (*hcloud.LoadBalancerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.LoadBalancerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *LoadBalancerTypeClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*LoadBalancerTypeClient)(nil).Get), arg0, arg1)
}

// GetByID mocks base method.
func (m *LoadBalancerTypeClient) GetByID(arg0 context.Context, arg1 int64) (*hcloud.LoadBalancerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.LoadBalancerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByID indicates an expected call of GetByID.
func (mr *LoadBalancerTypeClientMockRecorder) GetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*LoadBalancerTypeClient)(nil).GetByID), arg0, arg1)
}

// GetByName mocks base method.
func (m *LoadBalancerTypeClient) GetByName(arg0 context.Context, arg1 string) (*hcloud.LoadBalancerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(*hcloud.LoadBalancerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *LoadBalancerTypeClientMockRecorder) GetByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*LoadBalancerTypeClient)(nil).GetByName), arg0, arg1)
}

// List mocks base method.
func (m *LoadBalancerTypeClient) List(arg0 context.Context, arg1 hcloud.LoadBalancerTypeListOpts) ([]*hcloud.LoadBalancerType, *hcloud.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*hcloud.LoadBalancerType)
	ret1, _ := ret[1].(*hcloud.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *LoadBalancerTypeClientMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*LoadBalancerTypeClient)(nil).List), arg0, arg1)
}
